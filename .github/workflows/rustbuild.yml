name: Build and Release

on:
  # 推送到主分支时触发
  push:
    branches: [ master ]
  
  # 创建PR时触发
  pull_request:
    branches: [ master ]
  
  # 手动触发
  workflow_dispatch:
    inputs:
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - windows
          - macos
          - linux
      release:
        description: 'Create release'
        required: false
        default: false
        type: boolean

jobs:
  # 检查代码质量
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Check formatting
        run: bun run format --check

      - name: Type check
        run: bun run build

  # 构建Windows版本
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: lint
    if: github.event.inputs.platform == 'windows' || github.event.inputs.platform == 'all' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache/
            node_modules/
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Build Tauri app
        run: cargo tauri build
        env:
          CARGO_TERM_COLOR: always
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3

      - name: Create Windows zip package
        run: |
          $appName = "ba-cheeto"
          $version = "0.1.0"
          $zipName = "$appName-windows-v$version.zip"
          

          New-Item -ItemType Directory -Path "temp" -Force
          
 
          Copy-Item "src-tauri/target/release/ba-cheeto.exe" "temp/"
          
   
          if (Test-Path "src-tauri/target/release/resources") {
            Copy-Item "src-tauri/target/release/resources" "temp/" -Recurse
          }
          
     
          Compress-Archive -Path "temp/*" -DestinationPath $zipName -Force
          
      
          Remove-Item "temp" -Recurse -Force

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ba-cheeto-windows
          path: ba-cheeto-windows-v*.zip
          retention-days: 30


  # 创建发布
  # release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: [build-windows]
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'true')
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts

  #     - name: Create Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: |
  #           artifacts/ba-cheeto-windows/*.zip
  #         draft: false
  #         prerelease: false
  #         generate_release_notes: true
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
